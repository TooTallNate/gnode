#!/usr/bin/env node

var spawn = require('child_process').spawn;
var node = process.execPath || process.argv[0];
var HG = '--harmony_generators';

// first check if the current node executable has "Generators".
// if not, fall back to facebook/regenerator for Generators support.
hasGenerators(function (err, has) {
  if (err) throw err;

  // build up the node(1) arguments for Generator support
  var argv = (process.execArgv || []).slice(0);

  if (has && -1 == argv.indexOf(HG)) {
    // if the node process natively supports Generators,
    // then add the --harmony_generators flag
    argv.push(HG);
  }

  // process the regular arguments. if any of them begin with a hyphen (-) then
  // it's a switch and should be added *before* the ENTRY_POINT in the argv...
  var argsStart = 2;
  for (var i = argsStart; i < process.argv.length; i++) {
    var arg = process.argv[i];
    var isFlag = '-' == arg[0];
    if (isFlag) {
      argv.push(arg);
      argsStart++;
    } else {
      // must be the script file
      break;
    }
  }

  if (!has) {
    // no Generator support, then we need to load fallback.js first
    argv.push(require('path').resolve(__dirname, '..', 'fallback.js'));

    // store a reference to the entry point, so that fallback.js can pick it up
    if (process.argv.length >= 3) {
      process.env.GNODE_ENTRY_POINT = process.argv[argsStart];
    }

    argsStart++;
  }

  // add the rest of the arguments specified by the user
  if (process.argv.length >= argsStart) {
    argv.push.apply(argv, process.argv.slice(argsStart));
  }

  //console.error(argv);

  var opts = {
    customFds: [ 0, 1, 2 ],
    stdio: 'inherit'
  };

  // spawn a new node process with the necessary flags
  spawn(node, argv, opts);
});


/**
 * Async function that returns `true`/`false` for if Generators are
 * supported by V8.
 *
 * @api private
 */

function hasGenerators (fn) {
  var cp = spawn(node, [ '--v8-options' ]);
  var data = '';

  function onerror (e) {
    fn(e);
  }
  function ondata (b) {
    data += b;
  }
  function onend () {
    cp.removeListener('error', onerror);
    var has = -1 != data.indexOf(HG);
    fn(null, has);
  }

  cp.on('error', onerror);
  cp.stdout.setEncoding('utf8');
  cp.stdout.on('data', ondata);
  cp.stdout.on('end', onend);
}
